<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.omg.employee">
	<resultMap type="Employees" id="dto">
		<result property="teamId" column="team_id"/>
		<result property="departmentId" column="department_id"/>
		<result property="positionId" column="position_id"/>
		<result property="employeeId" column="employee_id"/>
		<result property="posName" column="position_name"/>
		<result property="teamName" column="team_name"/>
		<result property="techName" column="tech_name"/>
	</resultMap>
	
	<resultMap type="Employees" id="dto2">
		<result property="posName" column="position_name"/>
		<result property="teamName" column="team_name"/>
		<result property="deptName" column="department_name"/>
		<result property="teamId" column="team_id"/>
		<result property="employeeId" column="employee_id"/>
		<result property="departmentId" column="department_id"/>
		<result property="positionId" column="position_id"/>
		<result property="maxSalary" column="max_salary"/>
		<result property="minSalary" column="min_salary"/>
	</resultMap>
	

	<select id="selectEmpinfoList" resultMap="dto" parameterType="map">
		<![CDATA[ SELECT * FROM (
	    	SELECT ROW_NUMBER() OVER(ORDER BY hiredate DESC) rnum, e.name, e.phone, e.address, e.email, hiredate, birth, e.employee_id, e.position_id, e.team_id, p.POSITION_NAME, t.team_name
			FROM employees e, position p, teams t
			WHERE e.POSITION_ID = p.POSITION_ID and e.team_id = t.team_id(+)]]>
			<if test="dept != null">
	    		AND	e.department_id = #{dept}
	    	</if> 
	    <![CDATA[)  
	    	WHERE rnum >= #{startPage} AND rnum <= #{endPage} 
	        ORDER BY hiredate, employee_id DESC
	    ]]> 
	</select>
	
	<select id="EmpinfoTotal" resultType="Integer" parameterType="map">
		SELECT NVL(COUNT(employee_id), 0) 
		FROM employees
		<where>
			<if test="dept != null">
				department_id = #{dept}
			</if>
		</where>
	</select>
	
	<select id="selectEmpList" resultMap="dto">
		select * from employees e order by name 
	</select>
	
	<select id="selectEmpinfo" resultMap="dto" parameterType="String">
		select * from employees where department_id = #{deptID} order by team_id, position_id
	</select>
	
	<select id="selectPassword" resultMap="dto" parameterType="Employees">
		select * from employees where employee_id = upper(#{employeeId}) and password = #{password}
	</select>
	<select id="passSeurch" resultMap="dto" parameterType="map">
		select * from employees where employee_id = #{empId} and name = #{name} and email = #{email}
	</select>
	
	<select id = "selectlist" resultMap="dto" parameterType="String">
	select * from employees where employee_id=#{empid}
	</select>
	
	<update id= "updateinfo" parameterType="Employees">
	update employees set password=#{password},phone=#{phone},address=#{address},email=#{email}
	where employee_id=#{employeeId}
	</update>
	
	<select id="techlist" resultMap="dto" parameterType="String">
		select t.tech_name
		from employees e ,emp_tech et, techs t
		where e.employee_id = et.employee_id
		and t.tech_id = et.tech_id
		and e.employee_id = #{empId}
	</select>
	
	<select id="myNotTechList" resultType="String" parameterType="String">
		select tech_name
		from techs
		where tech_id not in (
			select et.tech_id
			from employees e ,emp_tech et
			where e.employee_id = et.employee_id
			and e.employee_id = #{empId}
		)
	</select>
	
	<insert id="myInsertTech" parameterType="map">
		insert into emp_tech(employee_id,tech_id)
		values(#{myId},#{techId})
	</insert>
	
	<!-- 인사.회계팀 일반사용자 부서별 직원정보 조회 -->
	<select id="p_selectEmp" parameterType="map" resultMap="dto2">
		<![CDATA[ SELECT * FROM (SELECT ROW_NUMBER() OVER(ORDER BY e.team_id, e.position_id, e.name asc) rnum, e.employee_id, e.name, e.birth,d.department_name, t.team_name, p.position_name, e.salary, e.hiredate, e.phone, e.address, e.commition
		from employees e, departments d, teams t, position p
		where e.department_id = d.department_id
		and  e.team_id = t.team_id(+)
		and  e.position_id = p.position_id]]>
		<if test="departmentId != null">
		and  e.department_id = #{departmentId}
		</if>
		<![CDATA[)  
	    	WHERE rnum >= #{startPage} AND rnum <= #{endPage} 
	    ]]> 
	</select>
	
	    	
	    
	
	<!-- 인사.회계팀 일반사용자 직원정보 수정 -->
	<update id= "p_updateEmp" parameterType="Employees">
		update employees set department_id=#{departmentId}, team_id=#{teamId}, position_id=#{positionId}, salary=#{salary},manager=#{manager}, commition=#{commition}
		where employee_id=#{employeeId}
	</update>
	
	<!-- 인사.회계팀 일반사용자 직원 삭제 -->
	<delete id="p_deleteEmp" parameterType="String">
		delete from employees where employee_id=#{employeeId} 
	</delete>
	
	<!-- 인사.회계팀 일반사용자 직원 등록 -->
	<insert id="p_insertEmp" parameterType="Employees">
		insert into employees (employee_id, name, phone, address, salary, manager, position_id, department_id, team_id, hiredate, birth,password, gender)
		values(#{employeeId},#{name},#{phone},#{address},#{salary},#{manager},#{positionId},#{departmentId},#{teamId},#{hiredate},#{birth},#{password},upper(#{gender}))
	</insert>
	
		
	<!-- 인사.회계팀 부서관리에서 팀장이 된 직원의 팀 업데이트-->
	<update id="p_teamConEmpUpdate" parameterType="Employees">
		update employees set team_id=#{teamId}
		where employee_id=#{employeeId}
	</update>
	
</mapper>