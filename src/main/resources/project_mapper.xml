<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.omg.projects">	
	<resultMap type="Projects" id="pro">
		<result property="projectId" column="project_id"/>
		<result property="projectName" column="project_name"/>
		<result property="startDate" column="start_date"/>
		<result property="endDate" column="end_date"/>
		<result property="projectPrice" column="project_price"/>
		<result property="teamId" column="team_id"/>
		<result property="departmentId" column="department_id"/>
		<result property="approvalName" column="approval_name"/>
	</resultMap>
	<!-- 대현 MAPPER 부분(영업부) -->
	<insert id="proInsert" parameterType="Projects">
		insert into 
		projects(project_id,project_name,project_price,start_date,end_date,department_id) 
		values(#{projectId},#{projectName},#{projectPrice},#{startDate},#{endDate},upper(#{departmentId}))
	</insert>
	
	<update id="proUpdate" parameterType="Projects">
		update projects 
		set project_name = #{projectName}, project_price = #{projectPrice}, start_date = #{startDate}, end_date = #{endDate}, department_id = #{departmentId}, approval = null, approval_name = null
		where project_id = #{projectId}
	</update>
	
	<delete id="proDelete" parameterType="String">
		delete from projects 
		<where>
			<foreach item="proid" index="proIdNum" collection="array" open="project_id in (" close=")" separator=",">
				#{proid}
			</foreach>
		</where>
	</delete>
	
	<!-- 리스트 뿌려주기 -->
	<select id="salProjects" resultMap="pro" parameterType="map">
		<![CDATA[ SELECT * FROM (
	    	SELECT ROW_NUMBER() OVER(ORDER BY start_date DESC) rnum, p.project_id, p.project_name, p.start_date, p.end_date, p.project_price, p.approval_name, p.approval, t.team_name teamName,  d.department_name deptName, (select count(DISTINCT tech_id) from project_tech where project_id = p.project_id) techCount
			FROM projects p, departments d, teams t 
			WHERE p.department_id = d.department_id and p.team_id = t.team_id(+) ]]> 
	 		<if test="apping != null">
	    		and p.approval is null 
	    	</if> -->
	    	<if test="appnot != null">
	    		and p.approval = 'X'
	    	</if>
	    	<if test="append != null">
	    		<![CDATA[and approval = 'O']]> 
	    	</if>
	    <![CDATA[)  
	    	WHERE rnum >= #{startPage} AND rnum <= #{endPage} 
	        ORDER BY start_date DESC
	    ]]> 
	</select>
	<!-- 글 개수 -->
    <select id="salProjectTotle" resultType="Integer" parameterType="map">
        SELECT NVL(COUNT(start_date), 0) 
        FROM projects 
     	<where>
       		<if test="apping != null">
	    		<![CDATA[and approval is null]]> 
	    	</if>
	    	<if test="appnot != null">
	    		<![CDATA[and approval = 'X']]> 
	    	</if>
	    	<if test="append != null">
	    		<![CDATA[and approval = 'O']]> 
	    	</if>
	    	and 1=1
	    </where>
    </select>
    
    <select id="salProjectByProId" resultMap="pro" parameterType="String">
        select p.project_id, p.project_name, p.start_date, p.end_date, p.project_price, p.approval_name, p.approval, p.department_id, t.team_name teamName,  d.department_name deptName
        FROM projects p, departments d, teams t
        where p.department_id = d.department_id and p.team_id = t.team_id(+) and p.project_id =#{proId}

    </select>
    
    <!-- 기술 부분 -->
    <!-- 해당 프로젝트의 TechList  -->
    <select id="proContTech" resultType="String" parameterType="String">
    	select t.tech_name
		from projects p, project_tech ph, techs t
		where p.project_id = ph.project_id and ph.tech_id = t.tech_id and p.project_id = #{proId}
    </select>
    
    <!-- 해당 프로젝트에 tech입력 -->
    <insert id="proContTechIn" parameterType="map">
    	insert into project_tech values(#{proId},#{techId})
    </insert>
    
    <!-- 해당하는 프로젝트 thch해당 기술 삭제 -->
    <delete id="proContTechByDel" parameterType="Map">
    	delete from project_tech
		where project_id = #{proId} and tech_id = #{techId}
    </delete>
    
    <!-- 해당 프로젝트 기술 전체 삭제 -->
    <delete id="proContTechAllDel" parameterType="String">
    	delete from project_tech
		where project_id = #{proId}
    </delete>
    
    
    <!-- 윤지 MAPPER 부분(인사 & 회계 부) -->
    <!-- 회사 전체매출 년도별 조회 -->
    <select id="sumProPrice" resultType="long" parameterType="String">
    	select sum(project_price)
		from projects
		where to_char(start_date,'yyyy')= #{year}
    </select>
    
    <!-- 부서별 년도 매출 조회 -->
     <select id="sumBydeptProPrice" resultType="long" parameterType="map">
    	select sum(project_price)
		from projects
		where to_char(start_date,'yyyy')= #{year}
		 and department_id= #{departmentId}
		 group by (department_id)
    </select>
    
    
    <!-- 대현 & 윤지 mapper (경영부) -->
    <!-- 리스트 뿌려주기 -->
	<select id="runProjects" resultMap="pro" parameterType="map">
		<![CDATA[ SELECT * FROM (
	    	SELECT ROW_NUMBER() OVER(ORDER BY start_date, end_date DESC) rnum, p.project_id, p.project_name, p.start_date, p.end_date, p.project_price, p.approval_name, p.approval, t.team_name teamName,  d.department_name deptName, (select count(DISTINCT tech_id) from project_tech where project_id = p.project_id) techCount
	    	FROM projects p, departments d, teams t 
	    	WHERE p.department_id = d.department_id and p.team_id = t.team_id(+) and p.end_date >= sysdate)  
	    	WHERE rnum >= #{startPage} AND rnum <= #{endPage} 
	        ORDER BY start_date, end_date DESC
	    ]]> 
	</select>
	<!-- 글 개수 -->
    <select id="runProjectTotle" resultType="int">
        SELECT NVL(COUNT(start_date), 0) 
        FROM projects 
        where end_date >= sysdate
    </select>
    
    <update id="runProInApp" parameterType="map">
    	update projects set approval = #{approval}, approval_name = #{approvalName}	where project_id = #{projectId} 
    </update>
</mapper>
